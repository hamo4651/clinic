scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")
scalar Date
scalar Time 
type Query {
    # ////////////user //////////////////////
    user(
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    users(name: String @where(operator: "like")): [User!]!
        @paginate(defaultCount: 10)
    # ////////////user profile
    profile: User @field(resolver: "App\\GraphQL\\Mutations\\Profile")
    # ////////////////////////////
    #  //////////// dotor////////
    doctor(id: ID @eq): Doctor! @find
    doctors: [Doctor!]! @all
    # ////////////Appointment/////////////
    appointments: [Appointment!]! @paginate
    appointment(id: ID! @eq): Appointment @find
    # ///////////Schedule/////////////
    schedules: [Schedule!]! @paginate
    schedule(id: ID! @eq): Schedule @find
    # //////////////////////////
}
type Mutation {
    # ////////////// auth
    Register(
        name: String!
        email: String!
        password: String!
        image: Upload
    ): AuthPayload @field(resolver: "App\\GraphQL\\Mutations\\Register")

    Login(email: String!, password: String!): AuthPayload
        @field(resolver: "App\\GraphQL\\Mutations\\Login")
    Logout: message @field(resolver: "App\\GraphQL\\Mutations\\Logout")
    #  ////////////////////////////
    update_user(name: String!, email: String!, password: String!): User @update

    delete_user(id: ID! @whereKey): User @delete
    # /////////////doctor///////////

    create_doctor(
        bio: String!
        specialization: String!
        phone: String!
        clinic_address: String!
        user_id: ID!
        fee: Float!
    ): Doctor @create

    update_doctor(
        id: ID!
        bio: String!
        specialization: String!
        phone: String!
        clinic_address: String!
        user_id: ID!
        fee: Float!
    ): Doctor @update

    delete_doctor(id: ID! @whereKey): Doctor @delete
    # /////////////Appointment////////////////////
    createAppointment(
        doctor_id: ID!
        user_id: ID!
        appointment_date: DateTime!
        notes: String
        status: String
    ): Appointment @create
    updateAppointment(
        id: ID!
        doctor_id: ID!
        user_id: ID!
        appointment_date: DateTime!
        notes: String
        status: String
    ): Appointment @update
    deleteAppointment(id: ID! @whereKey): Appointment @delete
    # /////////////////DoctorSchedule////////////////
    createDoctorSchedule(
        doctor_id: ID!
        day: String!
        start_time: Time!
        end_time: Time!
    ): Schedule @create
    updateDoctorSchedule(
        id: ID!
        doctor_id: ID!
        day: String!
        start_time: Time!
        end_time: Time!
    ): Schedule @update
    deleteDoctorSchedule(id: ID! @whereKey): Schedule @delete
    # ///////////////////////////
}

type User {
    id: ID!
    name: String!
    email: String!
    role: String
    doctor: Doctor @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
    image: String
    appointments: [Appointment] @hasMany
}

type Doctor {
    id: ID!
    bio: String!
    specialization: String!
    clinic_address: String
    phone: String
    user: User @belongsTo
    fee: Float!
    appointments: [Appointment] @hasMany
    schedules: [Schedule] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}
type Appointment {
    id: ID!
    appointment_date: DateTime!
    notes: String
    status: String
    user: User @belongsTo
    doctor: Doctor @belongsTo
}
type Schedule {
    id: ID!
    doctor: Doctor @belongsTo
    day: String!
    start_time: Time!
    end_time: Time!
}
type AuthPayload {
    token: String
    user: User
    message: String
    error: String
}
type message {
    message: String
}